import os
import numpy as np
import tensorflow as tf
#import cv2
#from glob import glob
from temp import load_data, tf_dataset
from model import build_model
os.environ["TF_CPP_MIN_LOG_LEVEL"] = "2"
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau, CSVLogger, TensorBoard
from tensorflow.keras.metrics import Recall, Precision

def iou(y_true, y_pred):
  def f(y_true, y_pred):
    intersection = (y_true * y_pred).sum()
    union = y_true.sum() + y_pred.sum() - intersection
    x = (intersection + 1e-15) / (union + 1e-15)
    x = x.astype(np.float32)
    return x
  return tf.numpy_function(f, [y_true, y_pred], tf.float32) 

if __name__ == "__main__":

  np.random.seed(42)
  tf.random.set_seed(42)

  print("")
  path = "D:\PhD work\Datasets\Polyp\PNG"
  (train_x, train_y), (valid_x, valid_y), (test_x, test_y) = load_data(path)
  print(len(train_x), len(valid_x), len(test_x))

  batch = 8
  lr = 1e-4
  epochs = 10

  train_dataset = tf_dataset(train_x, train_y, batch = batch)
  valid_dataset = tf_dataset(valid_x, valid_y, batch = batch)

  model = build_model()

  opt = tf.keras.optimizers.Adam(lr)
  metrics = ["acc", Recall(), Precision(), iou]
  model.compile(loss = "binary_crossentropy", optimizer = opt, metrics = metrics)

  callbacks = [
      ModelCheckpoint("C:/Users/user/.spyder-py3/model.h5"),
      ReduceLROnPlateau(monitor = "val_loss", factor = 0.1, patience = 3),
      TensorBoard(),
      EarlyStopping(monitor = "val_loss", patience = 10, restore_best_weights = False)
  ]

  train_steps = len(train_x) // batch
  valid_steps = len(valid_x) // batch

  if len(train_x) % batch !=0:
    train_steps += 1

  if len(valid_x) % batch !=0:
    valid_steps += 1
  
  history = model.fit(
      train_dataset, 
      validation_data = valid_dataset,
      epochs = epochs,
      steps_per_epoch = train_steps,
      validation_steps = valid_steps,
      callbacks = callbacks,
      shuffle = False
  )
  
  import matplotlib.pyplot as plt
  acc = history.history['acc']
  val_acc = history.history['val_acc']
  loss = history.history['loss']
  val_loss = history.history['val_loss']

  epochs = range(len(acc))

  plt.plot(epochs, acc, 'bo', label='Training accuracy')
  plt.plot(epochs, val_acc, 'b', label='Validation accuracy')
  plt.title('Training and validation accuracy')

  plt.figure()

  plt.plot(epochs, loss, 'bo', label='Training Loss')
  plt.plot(epochs, val_loss, 'b', label='Validation Loss')
  plt.title('Training and validation loss')
  plt.legend()

  plt.show()

  acc = history.history['acc'][-1]
  loss = history.history['loss'][-1]
  print('Training Accuracy:',acc);
  print('Training loss:',loss)
